[{"page_content": "Master of Science The Master of Science (M.S.) in Computer Science is the first graduate degree in the field, and can take one and a half years of full-time study to complete. The master's program is designed to prepare students for advanced careers in the computing industry, to create a research environment in computer science, and to prepare students for graduate work at the Ph.D. level. Students entering the program must have a bachelor's degree and/or adequate background in computer science. The master's program requires the completion of an approved program of 45 credits, with a thesis option. Coursework includes core courses in theory and programming practice, plus a 9-credit concentration in one specialization area. Core Requirements (6) Students are encouraged to take these courses as early as possible in your graduate program. One Theory course from: CS 581 Theory of Computation (3) CS 584 Algorithm Design & Analysis (3) CS 578 Programming Language Semantics (3) One Programming Practice course from: CS 558 Programming Languages (3) Any 500-level course designated by the department as programming-intensive (noted by a P in the undergraduate course section) (3) Track Requirements (9) All students in the CS Master's program must take three courses from a single track of the following: Databases Artificial Intelligence & Machine Learning Languages & Programming Security Software Engineering Systems & Networking The list of required courses and approved electives for each track are listed in the Track Courses page (/../computer-science/node/171) . Elective Requirements (30) Students must take enough electives to complete 45 total credits for the MS degree. Electives can be any 500-level CS course (/../computer-science/node/111) (see specific notes regarding CS 501-509 coursework below). A limited number of credits taken outside Computer Science can count towards the elective requirements, with advisor approval. Read more about Non-CS credits below. CS 505 (READING & CONFERENCE) AND CS 506 (SPECIAL PROJECT) CREDITS Students who are interested in exploring a specific topic or conducting a special research or other project for credit have the option to register in CS 505 (Reading & Conference) and/or CS 506 (Special Project) credits. A maximum of 6 credits of CS 505 and CS 506 can be counted towards the CS Master\u2019s degree elective requirements. Examples: CS 505 Reading & Conference: the student will study a textbook on a particular topic; complete the end of chapter problems; and discuss/present their chapter summaries, exercise solutions, and other content with the supervising faculty member. CS 506 Special Project: the student will gather and analyze data or research an agreed topic and write up their results in a presentable format under the guidance of the supervising faculty member. Students first need to find a faculty member to supervise these credits. The faculty member can help students to develop their idea, to ensure that it is consistent with the academic goals of the program, and to determine the appropriate course number, credit number, and project scope. They will assign the final grade at the end of the term. The By Arrangement Approval Dashboard can be used to register for CS 505/506 credits. Either the student or the faculty member can initiate a request, and once both have approved it, the request is automatically forwarded to the Department for approval and then to the Registrar\u2019s Office for processing. Thesis Option The thesis option requires the completion of 45 credits including 6-9 credits of CS 503 (Thesis) and an oral thesis defense. Students must follow PSU policies regarding committee appointments, defense procedures, formatting requirements, and submission procedures. University requirements and additional information for a master\u2019s thesis (/../gradschool/thesis-and-dissertation-information) are outlined by the PSU Graduate School. A thesis defense must take place in a meeting with the student and the appointed committee. It should be scheduled on a date that meets the GS deadline (/../gradschool/graduate-candidate-deadlines) for the desired graduation term. A room for the thesis defense may be scheduled through the CS department ( csoffice@pdx.edu (mailto:csoffice@pdx.edu) ). Thesis students will need to send their abstract/bio information and any requested equipment (projector) at least two weeks in advance of the defense to the CS Graduate Advisor ( gccs@pdx.edu (mailto:gccs@pdx.edu) ). Advising All newly admitted MS students will be advised by the CS Graduate Advisor. Every MS student is required to maintain a plan of study form (/../computer-science/sites/g/files/znldhr1671/files/2020-07/MS-Plan-of-Study.pdf) , which outlines both courses taken so far towards the degree and courses planned for the remainder of the program. This will also note any transfer and pre-admission courses, non-CS courses, and a student\u2019s intended track. An initial plan must be submitted to the CS Graduate Advisor by the end of the second term after the student\u2019s formal admission to the program. Approval from the CS Graduate Advisor will indicate an acceptable outline of the student\u2019s coursework. However, the plan can be revised at any time by mutual agreement of the student and the CS Graduate Advisor. A final version of a student\u2019s plan of study should be submitted by the student\u2019s last term of the program. Students completing a thesis are required to have a faculty adviser. Pre-admission, Transfer, and Non-CS Credits A minimum of 30 credits must be taken in Computer Science at Portland State University. Given this, students may use a combined total of 15 pre-admission, transfer, and non-CS credits toward their Master\u2019s degree with CS Graduate Advisor approval ( gccs@pdx.edu (mailto:gccs@pdx.edu) ). One additional credit beyond the 15 credit limit can be used provided none of the courses are a 1-credit course. Pre-admission credits (taken before the term of formal admission) can include both transfer and PSU credits. Pre-admission credits taken at PSU are requested via a DARS exception submitted to the Graduate School. This request should be made soon after admission to the graduate program. Transfer credits refer to credits taken from another institution other than PSU. To request approval of transfer credits, complete and submit the GO-21M form (Proposed Transfer Credit) (/../gradschool/forms) to the CS Graduate Advisor. Students should submit the GO-21 form during the first term of enrollment in the program, so there is sufficient time to complete any additional coursework that may be necessary. Any transfer credits must be approved before graduation paperwork can be processed. OHSU joint campus credits are considered transfer credits and are transferred via a different process. Read below for more information. Non-CS credits taken outside of Computer Science, such as ECE or Math*, can count towards elective requirements once approved. Non-CS courses must be graduate level. *Exception: only one ETM course will count towards the elective requirements. All ETM courses are eligible to transfer but students are limited to using only one for the CS degree requirements. Departmental Requirements In addition to the departmental requirements, students should review the university master's degree requirements (https://pdx.smartcatalogiq.com/2020-2021/Bulletin/Graduate-School/Degree-requirements/Master-s-Degree) . A minimum of 30 credits must be taken at Portland State University. Maintain good academic standing (https://pdx.smartcatalogiq.com/2020-2021/Bulletin/Graduate-School/Enrollment/Academic-Standing) with a cumulative graduate GPA of 3.00 or higher in all graduate credits earned at PSU. All graded courses must be passed with a grade of B- or better. Core requirements (#core requirements) must be passed with a grade of B or better. All courses taken Pass/No Pass must be passed. Coursework may include up to 6 credits of CS 505 (Reading and Conference) and CS 506 (Special Projects). CS 501 (Research), CS 502 (Independent Study), CS 504 (Internship), and CS 509 (Graduate Assistant Practicum) credits cannot be applied. Review the rules regarding CS 504 (Internship) (/../computer-science/node/276) . All coursework applied to the master\u2019s program must be completed within seven years prior to the awarding of the degree. If any credits are more than 7 years old at the time you apply for graduation, they may need to be re-validated (https://pdx.smartcatalogiq.com/2020-2021/Bulletin/Graduate-School/Degree-requirements/Master-s-Degree/Validation-of-out-of-date-graduate-credit) . Joint Campus Registration with OHSU Admitted graduate students at Portland State may take graduate courses offered by Oregon Health and Science University and have the credits included in their current term enrollment and tuition assessment at PSU. Only specific courses are approved for this joint campus arrangement (/../gradschool/joint-campus-registration) . Students must have permission from the instructor of the OHSU course as well as their home department to use the joint campus registration process and apply the OHSU courses to their PSU degree. Contact the CS Graduate Advisor ( gccs@pdx.edu (mailto:gccs@pdx.edu) ) for details. Graduation Procedure Follow the university\u2019s outline for Master\u2019s degrees (/../gradschool/summary-of-procedures-masters-degrees) . Apply for graduation by the first Friday of the first week of the anticipated term of graduation. See the Graduate Candidate Deadlines (/../gradschool/graduate-candidate-deadlines) for specific dates. Submit a revised Plan of Study (/../computer-science/sites/g/files/znldhr1671/files/2020-07/MS-Plan-of-Study.pdf) (if your coursework has changed since the initial filing) to the CS Graduate Advisor. For Thesis students, submit the GO-16M form (/../gradschool/forms) to the Graduate School. See the Graduate Candidate Deadlines (/../gradschool/graduate-candidate-deadlines) for specific dates.", "metadata": {"source": "https://www.pdx.edu/computer-science/master"}, "type": "Document"}, {"page_content": "Master's Track Courses As part of the degree requirements for the CS Master's program, students must complete three courses from one of the following tracks: Artificial Intelligence & Machine Learning Databases Languages & Programming Security Software Engineering Systems & Networking Track substitutions with other courses in the topic area may be permitted with the approval of the CS Graduate Advisor ( gccs@pdx.edu (mailto:gccs@pdx.edu) ). Artificial Intelligence & Machine Learning The Artificial Intelligence and Machine Learning track covers modern algorithms underlying intelligent and learning systems. Examples of topics covered in courses on this track include knowledge representation, planning, reasoning, combinatorial and adversarial search methods, natural language processing, computer vision, statistical machine learning, and evolutionary and reinforcement learning. CS 541 Artificial Intelligence (3) CS 545 Machine Learning (3) One course from the following: CS 542 Advanced Artificial Intelligence: Combinatorial Games (3)** CS 543 Advanced Artificial Intelligence: Combinatorial Search (3)** CS 546 Advanced Topics in Machine Learning (3) ** CS 570: Machine Learning Seminar (3) STAT 671: Statistical Learning I (3) STAT 672: Statistical Learning II (3) STAT 673: Statistical Learning III (3) SYSC 557 Artificial Life (4) OHSU CS 623 Deep Learning (3)* OHSU CS 562 Natural Language Processing* OHSU 5/692 Ethics in AI and Machine Learning Research* Any approved CS 510 Course in AI or Machine Learning (https://docs.google.com/spreadsheets/d/1Zzyb9E1zLwQ0TYErZfoW9i2BM83b_PFba6zWmzMELQs/edit#gid=0) *Courses taken through the Joint Campus Program (/../gradschool/joint-campus-registration) are considered transfer courses. Databases The Database track covers concepts, languages, implementation and application of database management systems. Other topics that have been offered in the track include formal foundations of databases, databases for cloud and cluster environments, and data stream systems. CS 586 Intro to Database Management Systems (3) Two courses from the following: CS 530 Internet, Web, & Cloud Systems (3) CS 587 Database Management System Implementation (3) CS 588 Cloud & Cluster Data Management (3) CS 589 Principles of Database Systems (3)** Any approved CS 510 course in Databases (https://docs.google.com/spreadsheets/d/1Zzyb9E1zLwQ0TYErZfoW9i2BM83b_PFba6zWmzMELQs/edit#gid=0) Languages & Programming The Languages & Programming track focuses on the design, implementation, and use of programming languages. It includes exposure to a variety of programming paradigms, experience using programming languages to express the essential abstractions of a problem domain, courses on programming language implementation, and the study of formal methods for specifying and reasoning about programs and programming languages. CS 558 Programming Languages (3) Two courses from the following: CS 515 Parallel Programming (3) CS 520 Object Oriented Programming (3)** CS 553 Design Patterns (3) CS 557 Functional Languages (3) CS 568 Functional Logic Planning (3)** CS 577 Modern Language Processors (3) CS 578 Program Language Semantics (3)** Any approved CS 510 course in Languages & Programming (https://docs.google.com/spreadsheets/d/1Zzyb9E1zLwQ0TYErZfoW9i2BM83b_PFba6zWmzMELQs/edit#gid=0) Security The Security track focuses on protecting computing systems and user data from unauthorized access and use. Topics include cryptography, network and host-based access control, vulnerability analysis, penetration testing, and reverse engineering. CS 591 Introduction to Computer Security (3) Two courses from the following: CS 530 Internet, Web, & Cloud Systems (3) CS 576 Computer Security Seminar (3)** CS 585 Cryptography (3) CS 592 Malware Reverse Engineering (3) CS 593 Digital Forensics (3)** CS 595 Web and Cloud Security (3) CS 596 Network Security (3) Any approved CS 510 course in Security (https://docs.google.com/spreadsheets/d/1Zzyb9E1zLwQ0TYErZfoW9i2BM83b_PFba6zWmzMELQs/edit#gid=0) Software Engineering The Software Engineering track studies the principles, processes, techniques, and tools for building software systems. Topics include software requirement, design, development, validation, and maintenance. CS 554 Software Engineering (3) Two courses from the following: CS 530 Internet, Web, & Cloud Systems (3) CS 552 Building Software Systems w/ Components (3)** CS 553 Design Patterns (3) CS 555 Software Specification & Verification (3)** CS 556 Software Implementation and Testing (3)** CS 561 Open-source Software Development (3) CS 565 Full Stack Web Development (3) Any approved CS 510 course in Software Engineering (https://docs.google.com/spreadsheets/d/1Zzyb9E1zLwQ0TYErZfoW9i2BM83b_PFba6zWmzMELQs/edit#gid=0) Systems & Networking The Systems and Networking track studies the design and implementation of operating systems, wired and wireless computer networks including high performance computer systems, data centers, cloud computing architectures, distributed systems, fault tolerance, concurrency, systems programming, and theoretical topics related to these areas. CS 533 Concepts of Operating Systems (3) CS 594 Internetworking Protocols (3) One course from the following: CS 515 Parallel Programming (3) CS 530 Internet, Web, & Cloud Systems (3) CS 531 Introduction to Performance (3) CS 535 Accelerated Computing (3) CS 538 Computer Architecture (3) CS 572 Operating Systems Internals (3)** CS 590 Introduction to Multimedia Computing and Networking (3) CS 598 Introduction to Wireless Network Protocols (3) ECE 586 Computer Architecture (4) Any approved CS 510 course in Systems & Networking (https://docs.google.com/spreadsheets/d/1Zzyb9E1zLwQ0TYErZfoW9i2BM83b_PFba6zWmzMELQs/edit#gid=0) *CS 532 does not count towards the track", "metadata": {"source": "https://www.pdx.edu/computer-science/masters-track-courses"}, "type": "Document"}, {"page_content": "Graduate Courses The following list contains all graduate courses that can appear on the Computer Science schedule, including selected courses offered by other departments. (The schedules for the 2023-2024 academic year (https://docs.google.com/spreadsheets/d/1MUwt5bKNNsas7O95b6x8ZyHO2ld4GekSJkRzboYe8cQ/edit?usp=sharing) are available, together with schedules for previous years (/../computer-science/computer-science-courses) .) Please note that some courses are experimental and may not be offered on a regular basis. These may be subject to change each academic year. Regular Courses: CS 515 Parallel Programming (https://docs.google.com/document/d/e/2PACX-1vSZFtavncSJZINNH74jSz9wBM95tv2SCHoFCEYl5RvDDCL4999dpZ4q9Hc4C5YyhbFdFEOZ30d9bEXi/pub) CS 518 Cultural Competence in Computing (https://docs.google.com/document/d/e/2PACX-1vRLzHp3sT6Zyi34gQ4ZgTT73HEMUS7Ghdl69gkoOcJCrdnNWHzujO5y6YgnuLYjx-IcPH1EcFKVR7F8/pub) CS 530 Internet, Web, & Cloud Systems (https://docs.google.com/document/d/e/2PACX-1vTVn5indfyG8xAtYf9RIwe1z6-u9eeQrD_gQWRx733xOsaa9Vw-su0poH8-7DD6GfyAqfoFVge6BHOq/pub) CS 531 Introduction to Performance Measurement, Modeling and Analysis (https://docs.google.com/document/d/e/2PACX-1vREduPR-XD_sxMtXp2ATYZlrotKNEw0OfVSUn5v0j-P7Lbi2MbxyJXueS7Sh1QbdSaVrA6d9SaobvBD/pub) CS 532 Operating System Foundations (https://docs.google.com/document/d/e/2PACX-1vTZb8iVKL_lssBoKnKXlRfv4IDQsNM2MkwmVWRb8r00AXqK8ZXWgugN4sjHVbEIcOBs0P6xfPl7MjzR/pub) CS 533 Concepts of Operating Systems (https://docs.google.com/document/d/e/2PACX-1vQShopinmQ8rBjXHkGQ3Zvkv-L99NtMNLFl9fndaC8_7L-uKm8u6lLZM3CuIHMgLeyPhKeUeOQ471tR/pub) CS 535 Accelerated Computing with GPU's and Xeon Phi (https://docs.google.com/document/d/e/2PACX-1vT4d3m3E5rI1unv5eP4oaHUZ44b-3NEDbzpfD_I_OtEEuzic7VWLmwcHpeDeuuPoJCxZtcL09segRyJ/pub) CS 538 Computer Architecture (https://docs.google.com/document/d/e/2PACX-1vQrXnGLmfM9TJ-dj1TP8GWGWx_cAVzwjjfYMShJ0nCHVMLRnri27yE5gnIn0gQ-chX651TrJwXg3ZfR/pub) CS 540 Deep Learning: Computational Structures and Programming (https://docs.google.com/document/d/e/2PACX-1vTXQbX9SS_Sg74u2fClYk6XBTCbXeZp2X91AZL5Z3FZTPhr7PNmJRo7e35RZ6jU9RfnNiUlFjA8wIJB/pub) CS 541 Artificial Intelligence (https://docs.google.com/document/d/e/2PACX-1vQ1QBwDS83fjcgD9Pla-_vwPlAY20lJqqD9FXnb8eqdEzkOtK76SVMxPIw3yLBww0nYKVxGhw7ljF9r/pub) CS 545 Machine Learning (https://docs.google.com/document/d/e/2PACX-1vRjWrqNhWVTnsHlMTXdzsCsIlgi0CtVYGnAecXXh4WZiOYJ24p4_G9EhSJr-t6aFq0O0_qEPFKbqNMW/pub) CS 547 Computer Graphics (https://docs.google.com/document/d/e/2PACX-1vSyZZPA-o0R6xpg65h5H1URC1oRk-ZgneUSrOoOBxQc7HUXAl8PzrufqlwUITDkqJtFNqwndPszfzBm/pub) CS 551 Numerical Computation (https://docs.google.com/document/d/e/2PACX-1vTbVi-MBP1exce4v3ZyhXIFcY1_Yw8qEITYavinjJB5te0HpINKdFnEsrVhqck_4cOP1MJOWoh-TiRP/pub) CS 554 Software Engineering (https://docs.google.com/document/d/e/2PACX-1vR3BieADnqTgY-jkJdV2lQx3Z8RBBErwR4OB-RurVhQnzdGESqvcah3jz-qL8AMxbMTdgr6QlHm3hew/pub) CS 557 Functional Programming (https://docs.google.com/document/d/e/2PACX-1vSInB4fmdJzycdWcsuCfRqBskHboSLyHta-6itbkXIk6IBmG9DHQZlwjTu4AJbtlZ-cAskgVbWPi-HD/pub) CS 558 Programming Languages (https://docs.google.com/document/d/e/2PACX-1vT84qveXMAr_HqMkId6ihutobS6yIS7cjppwZdU4lVc8AHbb7fz7SYIVKmVIkN-Va3oZXylgDu6aM7Z/pub) CS 563 Intro to Web Development (https://docs.google.com/document/d/e/2PACX-1vTgtHigx-Lt5JbMOquAAOI-dwzvcXm3IeWVbEen4b697Oa1SUQcz6d16KWNVtYtrPxCG6ohaGUF6Roi/pub) CS 564 Front End Web Development (https://docs.google.com/document/d/e/2PACX-1vQ3AGbQu6_aUeTpQy5marFRchZq9mkxoXQ4ADhqCT0n3lWzHxdVuE7CwaEvNmEU2nCiEnkv1KqqzRr1/pub) CS 565 Full Stack Web Development (https://docs.google.com/document/d/e/2PACX-1vQwD9pYjBCw-9dvNbZ5uCyZIoo9XXNBZE7E8YANP064ahVtwxK2O5FVVWQp8XRPxV0zZjZQU8J4RkDj/pub) CS 566 Voice Assistants (https://docs.google.com/document/d/e/2PACX-1vQtPBfR27Mke3I_aY3QorgNVvBfrpWl6luheKJxaihYqIwPmXXVhP34DCjO34VF24x5shQ5bH-FXUnR/pub) CS 569 Scholarship Skills for Computer Science & Engineering (https://docs.google.com/document/d/e/2PACX-1vShMHlnNU-LitlULgZjoUbVQB8xEy1ebO04pgfHaU0Iz3alBl5Xn8qZjhBvG8Ptuouiall7TTqr4-2I/pub) CS 576 Computer Security Research Seminar (https://docs.google.com/document/d/e/2PACX-1vSpPHJS8IDQamHd8Wj2y6_nzdTFdzIEpAwEZ43QUc_iR230hrOHLREbcQKBgcQ_eaCQ_SFIRlJco83g/pub) CS 577 Modern Language Processors (https://docs.google.com/document/d/e/2PACX-1vQECwhDpKRZwg0RQQmDaHx2NtBFv5ynAckvqgVMsz4NbiUfPo2riIC6NdJs5URPycLwIpL9LSf9dvVz/pub) CS 578 Programming Language Semantics (https://docs.google.com/document/d/e/2PACX-1vQAFpH-f4bL7ebv8xdmZ4K8IVk_mc8Onq2s8HjLWoc3cayfumvIUE4Xf0_S3gCI30_oR1-834OiuNTb/pub) CS 580 Randomized Algorithms and Probabilistic Analysis (https://docs.google.com/document/d/e/2PACX-1vSsPxMUtVTu2ceZzSHPRVjQm8bE0_Kng2jdeI-0zOh98IiPQ3H4Xt6SUq0NM7WfbmrUrpsq-3DAPE94/pub) CS 581 Theory of Computation (https://docs.google.com/document/d/e/2PACX-1vRqh_cQr1zVqZt6qUQI_pDXJvdmJ5ERtQ6PwhSnROvDwHS3W_iflnqSxETaFeysCZg1_RE4Qx4KacRh/pub) CS 584 Algorithm Design & Analysis (https://docs.google.com/document/d/e/2PACX-1vR8G8Kcn9_Q5pufxHFC9V0Y2XYjsaIqovuUHB-DyT_0oRUGkgwFyxo2s84c2YcWAlj20KUhys2SUAuk/pub) CS 585 Cryptography (https://docs.google.com/document/d/e/2PACX-1vTSW6QTvJbfvXiFRdm_mmxcUzBWJxGNinltESDtvCZrCaPmThAOV_OllkmIoEfvpwlC4KF_S8o7ojMc/pub) CS 586 Introduction to Database Management Systems (https://docs.google.com/document/d/e/2PACX-1vTlU2ThdsCQFCzO6N0x27_ZeiVdAXjWL2qpRzdaswEsGZQlZ4NIIPoYlGNINQYxdZyKBNT13Hp_2DAH/pub) CS 587 Database Management Systems Implementation (https://docs.google.com/document/d/e/2PACX-1vQk4m3I4xufMBhp2e0aaNAn3P9vKLjDy8hJcE5kzV4cwsofqRLM6a4VogP4RkPGorUHrJF37NX7uESE/pub) CS 588 Cloud & Cluster Data Management (https://docs.google.com/document/d/e/2PACX-1vR3bQoVzz4rHM987skzWeUyPQG4SUjUsQ_YjiYhoyFAFmjaISQCxXo9mtB_gfamyqkCeMyfxEKLBDFx/pub) CS 589 Blockchain Development & Security (https://docs.google.com/document/d/e/2PACX-1vRwAhkUpeIeoFAfzDuXuHPtOQajoBr5_JGe81d3762CM40etrwzL_oMrmWWLiSTAMPzXb83HpjhlVPK/pub) CS 590 Introduction to Multimedia Computing and Networking (https://docs.google.com/document/d/e/2PACX-1vQVWYtEoZSgcRCmnlsu4ac7ARoydZ6ZA759qkmtdF_YT7WmGw6SdMnkjyft_LisgvBrynphn2sYXLrW/pub) CS 591 Introduction to Computer Security (https://docs.google.com/document/d/e/2PACX-1vREuh6nhPCJiRkE_MZXnTB9FSD7Bg0XWdK8UmQnba8vF9QqhINWABDi7oQeHL8MotU7z4WMiPEro8Cc/pub) CS 592 Malware Reverse Engineering (https://docs.google.com/document/d/e/2PACX-1vS43cSAkyyyCt9VJuZISvwS5iGI0F3PcouIKTY1EIbQQolg-rFZ4ixwnRjnBlkbm0OAULWxucOEzOnV/pub) CS 593 Digital Forensics (https://docs.google.com/document/d/e/2PACX-1vSGVC8m7vTkQymb0_3ynwkmMf36bdRuCvzOzjnQj6yyk_3rdAtnakEd_TxF-xTudrKckn4AfgAFvA-2/pub) CS 594 Internetworking Protocols (https://docs.google.com/document/d/e/2PACX-1vSnp7VDZq4I8mYgx9b5F4kbCvArKN6GbQsYiPISwmWcQW3uV5HT0jtB8Dgj_Xmp3YIvSlOCc9R5MDKV/pub) CS 595 Web and Cloud Security (https://docs.google.com/document/d/e/2PACX-1vTeqha5ppnWgQLViQdjMbe9quI0nyOXSdY266kL_ob5DT5puXZ0Z2HdHEp5nXrSjSRnuvcyYmdCJe31/pub) CS 596 Network Security (https://docs.google.com/document/d/e/2PACX-1vRwDecq6YplzMtDS4kEQf7b-7cK3zibg0ufCsa0X_qAKST1qO0biayGx5JH1G5teTt-tGVUEGsbqPYu/pub) CS 658 Programming Languages (https://docs.google.com/document/d/e/2PACX-1vT84qveXMAr_HqMkId6ihutobS6yIS7cjppwZdU4lVc8AHbb7fz7SYIVKmVIkN-Va3oZXylgDu6aM7Z/pub) CS 669 Scholarship Skills for Computer Science & Engineering (https://docs.google.com/document/d/e/2PACX-1vShMHlnNU-LitlULgZjoUbVQB8xEy1ebO04pgfHaU0Iz3alBl5Xn8qZjhBvG8Ptuouiall7TTqr4-2I/pub) CS 676 Computer Security Research Seminar (https://docs.google.com/document/d/e/2PACX-1vSpPHJS8IDQamHd8Wj2y6_nzdTFdzIEpAwEZ43QUc_iR230hrOHLREbcQKBgcQ_eaCQ_SFIRlJco83g/pub) CS 677 Modern Language Processors (https://docs.google.com/document/d/e/2PACX-1vQECwhDpKRZwg0RQQmDaHx2NtBFv5ynAckvqgVMsz4NbiUfPo2riIC6NdJs5URPycLwIpL9LSf9dvVz/pub) CS 678 Programming Language Semantics (https://docs.google.com/document/d/e/2PACX-1vQAFpH-f4bL7ebv8xdmZ4K8IVk_mc8Onq2s8HjLWoc3cayfumvIUE4Xf0_S3gCI30_oR1-834OiuNTb/pub) CS 684 Algorithm Design & Analysis (https://docs.google.com/document/d/e/2PACX-1vR8G8Kcn9_Q5pufxHFC9V0Y2XYjsaIqovuUHB-DyT_0oRUGkgwFyxo2s84c2YcWAlj20KUhys2SUAuk/pub) Special Topic Courses (Active): CS 510 Top: Advanced Topics in C++ Programming (https://docs.google.com/document/d/e/2PACX-1vSX2AFoA6RtNLwbAJLcZTlnHIYiNaEAd866PdCxJ32HnQ0AAS9_Ygy4IUF1T0NbC8TVUStRrAC0sCCY/pub) CS 510 Top: Advanced Topics in Concurrency (https://docs.google.com/document/d/e/2PACX-1vQAhXXwV0bbFYrZQXZi9X_jgwrkYaqCubeeYYU4H9muJ0sVfitDd5OBR3-3k72ZIP1u520sLe6E8l_C/pub) CS 510 Top: Advanced Topics in Program Verification (https://docs.google.com/document/d/e/2PACX-1vTd_q-RC71dRY6i4VDiRrdzqgsPi65X_Y2834OVxLw-MZxzURsdEzoUskzov2LE3nUrBAOsOco3Vxhb/pub) CS 510 Top: Adventures in Natural Language Processing (https://docs.google.com/document/d/e/2PACX-1vQSkzKDZFLWPL20_oVugVVq2W6zGuO7VNbA6cM-zlS4VJUhECocHKyxgWkkNJjjCf5MxuChpyrxtCpc/pub) CS 510 Top: Code Large Language Models (https://docs.google.com/document/d/e/2PACX-1vQUOS5PJNd0o9ELK6b3Q2C5Yh6ndguraCFr4eCOKhxiC1lxRfJGEg5CS9hMKkMKN7VY_KJMxHEi0wOJ/pub) CS 510 Top: Code Reading & Review (https://docs.google.com/document/d/e/2PACX-1vRkxqzWsgIq8QWvrmZYrHX4rtZ1o1jz3Sl0M5tHR7sobDu1ODfDgfe33XjUNiwKi1keNnTLQrEG4pYS/pub) CS 510 Top: Programming Language Compilation (http://web.cecs.pdx.edu/~apt/510comp_ad) CS 510 Top: Computational Photography (https://docs.google.com/document/d/e/2PACX-1vRstX5cILPgcF7eUpazW7aRoGMpNuOMlMYWII2WDMNdCPvDMAySEJw_lgJsyYfUjdWrpIwW50ZOyKWz/pub) CS 510 Top: Computer Game Design (https://docs.google.com/document/d/e/2PACX-1vR34NYmtudDPJrzegwX4eQhcT5F-Pc2xAhGAiPWm5OPITyd5hM-wKQFIwF49XICXfcat55-RtYCWg_T/pub) CS 510 Top: Computer Vision and Deep Learning (https://docs.google.com/document/d/e/2PACX-1vTnrzTNw5ivFrmfHCQuOvF0j3NhMlDo86RS3BN7iJ0ncwtdR_qwqUfFTiHhJRUEq9537AkktZV9jYZa/pub) CS 510 Top: Computers, Sound and Music (https://docs.google.com/document/d/e/2PACX-1vRZWUTU-rYShZONhVnroFwej9-wXl6h2eGsNDLu_CAO-vu0X6nzT-x9oadf7kFQJtJKB0MNbeVEi8qs/pub) CS 510 Top: Contemporary Software Development with Java and Android (https://docs.google.com/document/d/e/2PACX-1vRJD5guEeIxcZu41_OGlfsDzqebHtJ_5spbmwxWDRXb1qIQw5F5NsNlCXcEnRydQW-4rIiuc5xVcIGe/pub) CS 510 Top: Data Clustering (https://docs.google.com/document/d/e/2PACX-1vRk1_jL-JoU8iCmmiCxx_ir7qMZidu6SHJ8J0ZPn6JwdJnRLy5f1aXhkItN_S5RnCwCTvq9cslxWSR3/pub) CS 510 Top: Data Engineering (https://docs.google.com/document/d/e/2PACX-1vTX9G6WLJ4ydQBI0RsyGI4Npc-vdLJ9eDPoccxYGnzrq6pxJT3fyEZ3tFMpNp-cD6IZC6rP3Ji9_bii/pub) CS 510 Top: Ethics in Artificial Intelligence (https://docs.google.com/document/d/e/2PACX-1vQk5bqV_iDSGRXk9-TfVVm8eKWvQ74q4qY9FPWTOrpzfKDWOTnNuhRTt-4ptXXhuJyyQBvrKsFjp3_c/pub) CS 510 Top: Exploring Fractals (https://docs.google.com/document/d/e/2PACX-1vSD00Ke6fJOFIK13XOl0kA0QgMfU5elZ32C1i2ewHFm0mT_u-kx5ld60mChvc06o7cKzB6ArAf3a_MX/pub) CS 510 Top: Formal Proof Foundations (https://docs.google.com/document/d/e/2PACX-1vRoWJ-YkZClOCOE4V9-2UNr-z2BPkugJGtQLd6seX32urJt1f1KFvR8hkwuF_HnkgSelqOjJojMFXii/pub) CS 510 Top: Foundations of Computer Vision (https://docs.google.com/document/d/e/2PACX-1vSG8-SIzp9aVcQHTbCtNibEUxqUhx_-gXA5fDKk6LOts9eYd9s2MrU2Qr7CCiSl83CyPCImCUpt0fE3/pub) CS 510 Top: Foundations of Emerging Technologies (https://docs.google.com/document/d/e/2PACX-1vQdbYq-rFYlvJBG0AE4Eiy-k-1cINwb2VEN8zT33vDsLUqK6ppN74cckz6NEGNjKLnQ6iRbTKcaSb1J/pub) CS 510 Top: Generative Security Applications (https://docs.google.com/document/d/e/2PACX-1vQwwiKdAKAxUh6ToYnkyVUX7TaTWxu95e7dLX5bLFSCwj5lzGyfKD-QIlMKgTdyAjeh5TQMCelOyr2R/pub) CS 510 Top: Graphical Models for Optimization and Learning (https://docs.google.com/document/d/e/2PACX-1vTvJjbNWWcsxDSfao1x1VAy-nrIftk56Iv9ENbbg9enY8L8H0uMnxh6r4WQKcMk4yNw4qW61MxbttRY/pub) CS 510 Top: Introduction to Computational Imaging (https://docs.google.com/document/d/e/2PACX-1vSTKKRjXpuFGM8h_s0fDNOkOOACtoONE0gTT2v0wNbX1qNJm038LveHXhWcgGvxPSWc7bVu-w-QZWzN/pub?urp=gmail_link) CS 510 Top: Introduction to Computational Photography (https://docs.google.com/document/d/e/2PACX-1vRdVyEB2he8O3uYvCTwrss63znTDKlhL4NgJYkH2QNoASy7BBnzND1Wz79HwQe6HwJnp-FQqeYx4pdB/pub) CS 510 Top: Introduction to Data Mining (https://docs.google.com/document/d/e/2PACX-1vQYiN7ErJIw4pU_f2IFUIHTEESrUgBUGJDNNi5V_y3x_OURYiSrhHFXXy27tDBDNyDSGdfwTRhDzHfS/pub) CS 510 Top: Introduction to Healthcare Data Analytics (https://docs.google.com/document/d/e/2PACX-1vQ-zs7HQOB_sL3m6TjLH_ETopFhjxOvySQR6xvAAyhwziX1NrKCqNIMGTaxEz-IpWYkSoDmYZZCvkHM/pub) CS 510 Top: Introduction to Privacy-aware Computing (https://docs.google.com/document/d/e/2PACX-1vTtu4HXMe4nO_H-FvBnmi4y8r5d2Q2hoVOc0rAQh4f_0iD2GPfjm2sGFolrCoMN1jfGpaHs9NT2Hd1T/pub) CS 510 Top: Introduction to Quantum Computing (https://docs.google.com/document/d/e/2PACX-1vSIK1nVf4agAO6r_2-oaEXOw85WrIxdGZt5oB-NInehl6Rr9rl1hU7TOtgJFlhprcp_kd7cUhGP9LlO/pub) CS 510 Top: Large Language Models (https://docs.google.com/document/d/e/2PACX-1vT5ISAnzoUv7w6tOBpPAVYvznbTnucvGZweEATbpcVZS2umLmZih78_3faNNKTydxl-uzFkRa0t9tEs/pub) CS 510 Top: Mobile and Wireless Networks (https://docs.google.com/document/d/e/2PACX-1vSJ_psm76TumAjoYLTWiODEs5A8du-O6AweOgFsXvaGBo8vLjd--GAXvDOcglJTue4HM-NfFjHNTr9U/pub) CS 510 Top: Mobile Health (https://docs.google.com/document/d/e/2PACX-1vQxbkh2lAmKswFaPPAehdZEXldkilIm8hlHDC1ro1mAQNUimTSNzWWYMkO6gRV-KBW7doyh03ahmHN9/pub) CS 510 Top: Mobile Health in the COVID Era (https://docs.google.com/document/d/e/2PACX-1vT9YO3GaudjdD2tcy_M1gtJlb2nHlRazyT5GHWAHAuMzTc39Y3VprYqCt3rzucNCgYmc4-fyZ3J7DI3/pub) CS 510 Top: Natural Language Processing (https://docs.google.com/document/d/e/2PACX-1vSGK3QIhAmWOGKmHQasSmeQBclplFZY_fThDLU__Eh5lYoouA3_R0dKcOSpyTb1DZxBiDejEvRno--x/pub) CS 510 Top: Networked Markets (https://docs.google.com/document/d/e/2PACX-1vSqG3VimymhYRgPWSn5sELgQmAa2PXTKgJR0jl9z2Vc2eRr3OafmG5nYqa0QR4dBaBeNCqVLgwqbYI0/pub) CS 510 Top: Operating System Internals (https://docs.google.com/document/d/e/2PACX-1vTsFBoH_nukivkmEh5VwxILaOvgLnwhe3pT_CdN4VUMHwLaJV-y8lI7wvbBPYbPVEbdzeaSgI4ikULg/pub) CS 510 Top: Programming Language Compilation (https://docs.google.com/document/d/e/2PACX-1vSgn92l0K7r7CJunBhOSAusX-mZxgShfYV6OoYqLfWafjoneotVuY88k7zwtkgnULTVDNAR-r-lkDy1/pub) CS 510 Top: Proof Assistants and Program Verification (https://docs.google.com/document/d/e/2PACX-1vSyngg-XZy3ukz_RFqNt5hRu6ojM8BpHkgkh_JlnZS5plTYbP5HEOrECUQmY_PekMby1IaJ05k8Bl9G/pub) CS 510 Top: Reinforcement Learning (https://docs.google.com/document/d/e/2PACX-1vQrhSXrGurKlOG5jhgdx9DTw9Pcn8jmjRYcS6xvM3qYKcU4TFIxmKV8YWd5DB-Qk9zi-aERk0Zg4jr5/pub) CS 510 Top: Rust for Small Systems Programming (https://docs.google.com/document/d/e/2PACX-1vSOsMpOEhG9hLxA8dnXVymgBCUJkdkggQbNqxd3crYQ9atRS16_cm7rdMzdTL2TuRsnHt8I3UaUmxNH/pub) CS 510 Top: Rust Programming (https://docs.google.com/document/d/e/2PACX-1vRpnHXPaN5HyaEEiv4uQTyWYjeHVfVYZyKl43nlhG1Z76T35lo4JbHwcw9E-1103IHQNUPrbIwptVxx/pub) CS 510 Top: Rust Web Development (https://docs.google.com/document/d/e/2PACX-1vQX3geESTOG-Mcy6daNsaap85SqBsYt0wtrnRl_A1llcs8JV0pOZgSSnVfbj2-_SbzP6lNPCAhftyNB/pub) CS 510 Top: Secure System Administration and DevOps (https://docs.google.com/document/d/e/2PACX-1vSHKtTXi7W4-tLMvMxoD5YnmXpIRTVyS72kmtW67tj4Hp65YCdi75Zna9bC6uyajPiUT9rG_6x7eZYP/pub) CS 510 Top: The Joy of Coding with Java and Android (https://docs.google.com/document/d/e/2PACX-1vTT0yQbtCo6i-FKaVwg_AYZNmrnUs2wK2sRbLCFFhfrGg3Ej1X23FclP5c8nYI5CgQKwdC8WJOr__cW/pub) CS 510 Top: Unconventional Cameras (https://docs.google.com/document/d/e/2PACX-1vSTKKRjXpuFGM8h_s0fDNOkOOACtoONE0gTT2v0wNbX1qNJm038LveHXhWcgGvxPSWc7bVu-w-QZWzN/pub?urp=gmail_link) CS 510 Top: Usability Engineering (https://docs.google.com/document/d/e/2PACX-1vQiLnzvmIKsv-r2eGnsqNd-t1l51PcRE4ZVbC3OB_XyDl1UUPp8R8hwwOLdgszdIlUyskox5oImJIrU/pub) CS 510 Top: Wireless Networks and Applications (https://docs.google.com/document/d/e/2PACX-1vTqBSKuvi2bwTsPuZnlRIRZVp9dT-DJOIn7iUyEEaptuolJKMoswiBflE-dMWQKRizkRGXifTBCAbkt/pub) CS 610 Top: Computational Photography (https://docs.google.com/document/d/e/2PACX-1vRstX5cILPgcF7eUpazW7aRoGMpNuOMlMYWII2WDMNdCPvDMAySEJw_lgJsyYfUjdWrpIwW50ZOyKWz/pub) CS 610 Top: Graphical Models for Optimization and Learning (https://docs.google.com/document/d/e/2PACX-1vTvJjbNWWcsxDSfao1x1VAy-nrIftk56Iv9ENbbg9enY8L8H0uMnxh6r4WQKcMk4yNw4qW61MxbttRY/pub) CS 510 Top: Virtual Reality (https://docs.google.com/document/d/e/2PACX-1vQ5VV_Uw9jP8a5dGIozj8ilGwUBPlXeWjo-4Q-EmgkZLkEnSftB_vweFQI-IoSyVPyPeuoP9-cS6TED/pub) Other Courses: CS 520 Object-Oriented Programming and Design (https://docs.google.com/document/d/e/2PACX-1vS2GkRAWBAcXKagjOk4dLDHIpp8gQS5i4ubHq9ggLShbj4Mh2bvPj3_XY1OWLRuMIVT0nG-7ISYLGSR/pub) CS 542 Advanced Artificial Intelligence: Combinatorial Games (https://docs.google.com/document/d/e/2PACX-1vSPl9onr81ezSAvoRrbLkn5Ym_acywrAPj3-VNvF-eL8vt3xb_e1N4Jcxfy86QMujMq8-AAqsKPs_bf/pub) CS 543 Advanced Artificial Intelligence: Combinatorial Search (https://docs.google.com/document/d/e/2PACX-1vROcIE4UPp_iF0QwTZWFI6UPOWOs05NJVhHsFg3ggOxh0HaNXVlzX9Zo1ZgZjiDO7O954kvwuMEyocK/pub) CS 546 Advanced Topics in Machine Learning (https://docs.google.com/document/d/e/2PACX-1vRQRF3lG5jFCXReC84LYQbGuKUG4DSeepQS5Rd8-38MSZ7ENlXBOVbraSPQ4pJyZKUrfNY7j3SPFZdi/pub) CS 549 Computational Geometry (https://docs.google.com/document/d/e/2PACX-1vS7kTWJwQSZeP5PjDCXSHK1Y9M0hnJPj1XtWSPvVfdes-eCNUQMByTuBVK3Ifihb9BQjQD_uYsXQv4A/pub) CS 550 Parallel Algorithms (https://docs.google.com/document/d/e/2PACX-1vQhidRk4QAg702WJNUlVn0SxRxGuZfu7kqHw0shhi6o1aQF4azKXCSJbJt5hbIagTGsXGTHYrdvh8_m/pub) CS 552 Building Software Systems with Components (https://docs.google.com/document/d/e/2PACX-1vTyu5rkO9k0XyoVPWzspq0_DNp2OJD4yw9IUMK4LpcIMma0xKHOat0av4quoeZi2DDxeZTPjipOeW1B/pub) CS 553 Design Patterns (https://docs.google.com/document/d/e/2PACX-1vSBP0SiBa1sHVxnQxra2_4o-mSdAglMpC2jZ_Y0Ni6U-obXQ8I2fkEE1Lqcs0GtiUT1Hl8qCfQc7_6Y/pub) CS 555 Software Specification and Verification (https://docs.google.com/document/d/e/2PACX-1vSPXf9GPCsk12iBLTYIl8RoUxNU2t9Svh3POWDqdSlU26_vJwQ0Lnmmf6IO3WIPkV-lP8VA4Wa38bHy/pub) CS 556 Software Implementation and Testing (https://docs.google.com/document/d/e/2PACX-1vRgCiC4mHVrDEd8KekKnHYHpiQIxE19IPoHUHpRmta9EyEJCmC5oaYZHed8VfsouxbK3hJpNiuLQ65c/pub) CS 559 Software Measurement & Models (https://docs.google.com/document/d/e/2PACX-1vRCg7B7L1c6gQr2s4v3NRj12ZjxY2MkqPwmMgJ2kauInZlSZZSeE5FndsguRewQ5uS2pZpjarfnnZZU/pub) CS 560 Human-Computer Interaction (https://docs.google.com/document/d/e/2PACX-1vSVoBI9OQa2T6eQeZr4RZCA0MWir4Jr57PH866UFPy_abJpbAeu_-pdqIl0Ahxep67tF3XHJU6LLRS1/pub) CS 561 Open Source Software Development Laboratory (https://docs.google.com/document/d/e/2PACX-1vT5G2NmHQUbNRw-wbGr4VWItPO1vi4uz8Nh3SuI67aT605IAt3x8JLltnrvIvrxSGXuhyRvhnlIGhz6/pub) CS 562 Advanced Open Source Software Engineering (https://docs.google.com/document/d/e/2PACX-1vTsvVwOxgODde55_oQxsXyWd74Tu7SwKkCJfGjwTXTroSpLRALnjD6sJ8lyqsiRuYLQX31PRBUjIbQf/pub) CS 567 The Wireless Web (https://docs.google.com/document/d/e/2PACX-1vRHjCuvwMiveA2cpUejcQeKwIbu3rj3JTkuPgHc37SYop8WeOA7fawk3gRrgogOOsGQK4TsM-m7PdH5/pub) CS 568 Functional Logic Programming (https://docs.google.com/document/d/e/2PACX-1vRFfGIchvbvmlu_7MmQJnDzu0lMGEoZLIdFTxBt0i9ji73XP3vUZ3xXnOKQEldALM_l3jbu7k-BueUf/pub) CS 570 Machine Learning Seminar (https://docs.google.com/document/d/e/2PACX-1vRnMVcBNyVb6GXeTbXNP-3OoFw_bT4zmAFT13Wzq3oT7sEYQWx2kIUrNIs4xQt5tHpcmo8YZdCxmdVC/pub) CS 572 Operating System Internals (https://docs.google.com/document/d/e/2PACX-1vRHYnZK71eyVMOL_1_gPW18rk4gmlJHj_kr7VFaNAMSNkUCABJ07jsWwbyq4p4i4DEjKHjQ8DXf6SW_/pub) CS 575 Computer Systems Analysis (https://docs.google.com/document/d/e/2PACX-1vSqaqxSWZ1nfISC0uRfdKmzND2tN6Z-VsuDF3i-KCHep-nGlPy5Kz5RIWpdKtIoF-d-iHZZlhFDK0dH/pub) CS 579 Formal Verification of Hardware/Software Systems (https://docs.google.com/document/d/e/2PACX-1vSglScU1qhc9V13gHQ--I8XcpwCjSkb63hNsC_btGnzuAIN0R6IJZNNndG8IJ4PbGQ2l4i83osK-RJf/pub) CS 582 Theory of Computation: Advanced Topics (https://docs.google.com/document/d/e/2PACX-1vSbcu5tLt2KjKYiXp5cL85MilzNbJRzf08RB7teijxNmwcmcRnep5DuhMJKl2q_oEvPe458qluXrZ4P/pub) CS 583 Automata and Formal Languages (https://docs.google.com/document/d/e/2PACX-1vTbapq9oNG5NM_FVCZYAAauq2FvZfzVblNTy_06RhgNClqKLA1yaR41_GlBB07ur9WIRHjj69Xz8BEk/pub) CS 597 Sensor Networks (https://docs.google.com/document/d/e/2PACX-1vQpDvlUO4SeHHTlk-qzvIJmn_17NNHoDC4zIM2Cgx8y8CeDBkoZOzHuIUpvb2XRyqDyZWgJ9EBhsmS9/pub) CS 598 Introduction to Wireless Network Protocols (https://docs.google.com/document/d/e/2PACX-1vSQjKm83xEFVfwSPWOLKEOVRdD9X6F105_rkgy0elNwPLQgRYvPFJAWU2wuCoAKyjD8VawFlhMb6Ozc/pub) CS 653 Design Patterns (https://docs.google.com/document/d/e/2PACX-1vSBP0SiBa1sHVxnQxra2_4o-mSdAglMpC2jZ_Y0Ni6U-obXQ8I2fkEE1Lqcs0GtiUT1Hl8qCfQc7_6Y/pub) CS 655 Software Specification and Verification (https://docs.google.com/document/d/e/2PACX-1vSPXf9GPCsk12iBLTYIl8RoUxNU2t9Svh3POWDqdSlU26_vJwQ0Lnmmf6IO3WIPkV-lP8VA4Wa38bHy/pub) CS 656 Software Implementation and Testing (https://docs.google.com/document/d/e/2PACX-1vRgCiC4mHVrDEd8KekKnHYHpiQIxE19IPoHUHpRmta9EyEJCmC5oaYZHed8VfsouxbK3hJpNiuLQ65c/pub) CS 659 Software Measurement & Models (https://docs.google.com/document/d/e/2PACX-1vRCg7B7L1c6gQr2s4v3NRj12ZjxY2MkqPwmMgJ2kauInZlSZZSeE5FndsguRewQ5uS2pZpjarfnnZZU/pub) CS 668 Functional Logic Programming (https://docs.google.com/document/d/e/2PACX-1vRFfGIchvbvmlu_7MmQJnDzu0lMGEoZLIdFTxBt0i9ji73XP3vUZ3xXnOKQEldALM_l3jbu7k-BueUf/pub) CS 672 Operating System Internals (https://docs.google.com/document/d/e/2PACX-1vRHYnZK71eyVMOL_1_gPW18rk4gmlJHj_kr7VFaNAMSNkUCABJ07jsWwbyq4p4i4DEjKHjQ8DXf6SW_/pub) Other Special Topic Courses: CS 510 Top: Advanced Functional Programming (https://docs.google.com/document/d/e/2PACX-1vTZR9rsNO63kpc52dMzvyuXxN79yYKqadibJ93FuSmzcHXZN00COX59WrBPrEuNL4Jj_R8EPdJzsDy8/pub) CS 510 Top: Advanced Java Programming (https://docs.google.com/document/d/e/2PACX-1vQ_qH_r2WVmYHQX0G-Imamriz-00khrQ7tnJyMVASJzw7KiUmDQg7eojOs6ymn11oqmTlPdnfKwQNmB/pub) CS 510 Top: Algorithms Coding (https://docs.google.com/document/d/e/2PACX-1vT80jlHUaM-ToNIJ7EGZt2Jv2wgcjnaZ5WzT6d8O4RFCT0rvRLu2bOTAdcUwMGiyJvr6GXwIK89d9Dm/pub) CS 510 Top: Generative AI (https://docs.google.com/document/d/e/2PACX-1vRxQRsdkifk4mqraTaXSu5o7NBNkQhh1Fn8uHkFt9TKvRK1g3o2_pCKNbvUpzqBx5HNey31FtmwOx-P/pub) CS 510 Top: Introduction to HCI (https://docs.google.com/document/d/e/2PACX-1vRtp72MybfA9L2tvamDc1_37gkDsj7C9dfIq0JBbuoyv7AWBZ0P7JBrMmxHBt0h-Ue2Eyq2tweaq1ak/pub) CS 510 Top: Introduction to Visual Computing (https://docs.google.com/document/d/e/2PACX-1vSAwVOr-aL99uTKmmKrWuCDpObBApwc4L-nbvp7seQa5zunkpM7vw4la5x_sT2BlU1iO-dYmcS27reG/pub) CS 510 Top: Languages and Low-Level Programming (https://docs.google.com/document/d/e/2PACX-1vQuC954L4zYpruCaH2L1evQqj0CwrXUZnuNhs8WZmrMBh8C7FdjveSyzWXOJbJU7_LQgHQynD6RSlWv/pub) CS 510 Top: Markets and the Internet (https://docs.google.com/document/d/e/2PACX-1vSrAPWiA1QhNDDP6iKfn0lDR4fMDMnOt1cZWq_pB8dggqEBMC5wcTRSpa8hUSkuxcdS2pG3RXdWPD9a/pub) CS 510 Top: Modern Agile and Other XP Software Engineering (https://docs.google.com/document/d/e/2PACX-1vSSIDv3Bst7u1qw5UDkGW8ddqMmhvDOBfPy7XxPA1v4iPKyrPSo2IdF1-st68H_nYnK3SW0UVl2PfoU/pub) CS 510 Top: Modern Embedded Computing (https://docs.google.com/document/d/e/2PACX-1vSYgIKwO5ISvBjtH7fzedhh1CoOQHoBYQM8MLajx7qUGRRZXOD_zcIEPsg6TzJDdycmd0b3Yd079IN8/pub) CS 510 Top: Network Security (https://docs.google.com/document/d/e/2PACX-1vS3UW_DfT1LxvrA-vslsKJWpGMDzPQ4gz_i75G3JSZBTCijxc_ALnyx0il5-C0zRAVul6v8eUF-qyqp/pub) CS 510 Top: Practicum in Asynchronous Systems and Algorithms (https://docs.google.com/document/d/e/2PACX-1vRMSsM3YdYchdHkaqz-zwBYmEjtzO3M--p_twafJl54tjAsSY3K7apU2joeQZsO3captXla1X-THeNX/pub) CS 510 Top: Software Design Patterns (https://docs.google.com/document/d/e/2PACX-1vSETfcRee4nxjwW4E1feaFOPpZ-19_d8hAKJNdGpWW9KxmaRIGeugt0BE0xCaRvpKVYw8Uxn1wpJykq/pub) CS 510 Top: Spoken Language Interfaces (https://docs.google.com/document/d/e/2PACX-1vTj1wS2bd27Ex6gqnlrEIHSZSSGlEoDOH3JXgIRxR6fXsUAn47lcWz7xj90-v3vhEjGD9lopp7Kvfv5/pub) CS 510 Top: Theorem Proving and Program Verification (https://docs.google.com/document/d/e/2PACX-1vR0IixS2_oOd8YHLbn9tAjuGsagoiwsizVNBxCs8kmdgNq4ufEwmw8TN6WE8czVzJQ4ZbLAUyDKiX6Y/pub) CS 510 Top: Topics in Software Validation (https://docs.google.com/document/d/e/2PACX-1vQElN71dabS3dz08qNaMrPanL0O7gnydP2X7uvehPeeNT3CiPbd6qiuwv9xJC8Hlz0DLBMDQn25RY6m/pub) CS 510 Top: Unit Test Branching Strategy (https://docs.google.com/document/d/e/2PACX-1vQGOJHeZ7kX2JOxNqGNkTOpF3oDDR8-lxA4ZMh2z0tRKgMrkc2wq-BIVz4MW5A8Px7Rsyjg5gErZvWd/pub) CS 510 Top: User Interfaces (https://docs.google.com/document/d/e/2PACX-1vTiTB_u7719HmZxSiO456i_LpzWNfcQ_M0F1vLYvV7-XAsLm4z8ESFtnA2OusQ6E9cgxHeY8sy1IB1e/pub) CS 510 Top: Compilers and Interpreters (https://docs.google.com/document/d/e/2PACX-1vQPJtXHbVOMCSM1gy57_onxlUVCLR1LsvSz-cU4jG8-stiH05sTx_g-aZFJ9I8SqKi2-hdQNPHAlMTt/pub) To review course descriptions of previously offered courses, please contact the instructor (https://ondeck.pdx.edu/computer-science/directory) or review the PSU Bulletin (https://ondeck.pdx.edu/academic-affairs/psu-bulletin) . CS Catalogs (https://docs.google.com/spreadsheets/d/1O4trXpMAaRxC_Dr9z7QkaLpcaCDpYU-Xgs_vBdSijnY/edit?usp=sharing) 2021-22 (https://docs.google.com/spreadsheets/d/1O4trXpMAaRxC_Dr9z7QkaLpcaCDpYU-Xgs_vBdSijnY/edit?usp=sharing) (https://docs.google.com/spreadsheets/d/13hNskr0kFIN2qgIQK-1mrgN6uZ9mMNNS7dErjgU3tH0/edit) 2020-21 (https://docs.google.com/spreadsheets/d/13hNskr0kFIN2qgIQK-1mrgN6uZ9mMNNS7dErjgU3tH0/edit) (https://docs.google.com/spreadsheets/d/1Ej6I6niDOwEjYqevOOi_05v7lrBJZIgW6YN8hXGAsE0/edit#gid=511554810) 2019-20 (https://docs.google.com/spreadsheets/d/1Ej6I6niDOwEjYqevOOi_05v7lrBJZIgW6YN8hXGAsE0/edit#gid=511554810) (https://docs.google.com/spreadsheets/d/13fHhL9wbInlUNFm5-Yp1wsimNp1Fl9FMg02om8J4ols/edit#gid=1731313124) 2018-19 (https://docs.google.com/spreadsheets/d/13fHhL9wbInlUNFm5-Yp1wsimNp1Fl9FMg02om8J4ols/edit#gid=1731313124) (https://docs.google.com/spreadsheets/d/1mKTXjt_iWOtjzQ8_D1JRWxksg07I62Rmfay_AFlrNL4/edit#gid=739953919) 2017-18 (https://docs.google.com/spreadsheets/d/1mKTXjt_iWOtjzQ8_D1JRWxksg07I62Rmfay_AFlrNL4/edit#gid=739953919) (https://docs.google.com/spreadsheets/d/1_MjPMjz_Ur2t5rJdbwltSNEwjAYeH5NyUCHsQ0NDKBI/edit#gid=0) 2016-17 (https://docs.google.com/spreadsheets/d/1_MjPMjz_Ur2t5rJdbwltSNEwjAYeH5NyUCHsQ0NDKBI/edit#gid=0) (https://docs.google.com/spreadsheets/d/1nD7h9VQTOmd8FUqW4J_e5GAa22T-JuYxWMSIBfHZJ30/edit#gid=0) 2022-23 (https://docs.google.com/spreadsheets/d/1nD7h9VQTOmd8FUqW4J_e5GAa22T-JuYxWMSIBfHZJ30/edit#gid=0)", "metadata": {"source": "https://www.pdx.edu/computer-science/graduate-courses"}, "type": "Document"}, {"page_content": "Thesis and Dissertation Information All graduate students who are doing a formal thesis or dissertation must follow PSU policies regarding committee appointments, defense procedures, formatting requirements, and submission procedures. These pages are intended to guide students through these various processes. Please review them carefully and feel free to contact us with questions at grad@pdx.edu (mailto:grad@pdx.edu) or 503-725-8410, Option 2. For committee, defense, and graduation questions, contact your processor in the Graduate School: Brenda Fugate, fugateb@pdx.edu (mailto:fugateb@pdx.edu) or (503) 725-5230 - master's students with PSU ID numbers ending 00-49 Andrea Haack, ahaack@pdx.edu (mailto:ahaack@pdx.edu) or (503) 725-8460 - master's students with PSU ID numbers ending 50-99 Roxanne Treece, treece@pdx.edu (mailto:treece@pdx.edu) or (503) 725-5241 - all doctoral students For thesis/dissertation formatting and submission questions, contact the Format Editor at etdinfo@pdx.edu (mailto:etdinfo@pdx.edu) . Electronic Thesis and Dissertation (ETD) Information Links (/gradschool/etd-formatting-requirements) Formatting (/gradschool/etd-formatting-requirements) (/gradschool/etd-publishing-options) Publishing (/gradschool/etd-publishing-options) (/gradschool/etd-submission-instructions) Submission (/gradschool/etd-submission-instructions) (/gradschool/etd-faqs) ETD FAQs (/gradschool/etd-faqs) (/gradschool/etd-and-format-review-resources) Resources (/gradschool/etd-and-format-review-resources) Committee Appointments The timing for the appointment of master\u2019s and doctoral committees is quite different. Doctoral committees are appointed early in the process, shortly before the proposal defense. Master\u2019s committees are appointed much later, approximately one term before the final defense. A student\u2019s thesis or dissertation committee is appointed with the GO-16 form (/gradschool/appointment-masters-thesis-or-doctoral-dissertation-committee-go-16-form) . The GO-16 webpage (/gradschool/appointment-masters-thesis-or-doctoral-dissertation-committee-go-16-form) provides full information about eligibility requirements for committee members. For doctoral students, the GO-16 should be submitted to the Graduate School a minimum of six weeks before the anticipated date of the proposal defense. For master\u2019s students, the GO-16 submission deadlines are based on the intended term of graduation ( view the deadlines (/gradschool/graduate-candidate-deadlines) ). If an already appointed committee needs to be revised, contact the Graduate School for assistance. Defense Procedures and Deadlines PSU policies regarding thesis and dissertation defenses apply to: A master\u2019s student\u2019s final defense A doctoral student\u2019s proposal defense (sometimes called a prospectus or colloquium) and final defense Students must deliver a final draft of their document to their entire committee no fewer than 14 days before the defense date. A defense may only be scheduled during the regular academic terms; for summer, this is the eight-week Summer Session. View final defense deadlines for the current academic year (/gradschool/graduate-candidate-deadlines) . A final defense after these deadlines will result in graduation in a subsequent term. A thesis or dissertation defense must take place in a meeting with the student and the entire, appointed committee. While it is expected that all members should be physically present, remote participation is permitted under specific conditions (/gradschool/remote-thesis-dissertation-participation) . It is incumbent on students and faculty to know that the committee has actually been approved by the Graduate School and who the appointed members are before any proposal or final defense is held. If there are questions about whether a committee has been approved or who the appointed members are, contact the Graduate School. Formatting Requirements All theses and dissertations must meet Graduate School formatting requirements (/gradschool/etd-formatting-requirements) . We encourage students to review the formatting requirements early in the thesis or dissertation process; it is much easier to properly format the document to these specifications from the beginning as opposed to changing all the formatting when preparing for submission. Submission Procedures and Deadlines Graduate students completing a thesis or dissertation must submit the final version of their document to the Graduate School. The final version is the document that has been approved by each of your committee members after all required post-defense edits have been made. The final version must also conform to the Graduate School's formatting requirements. Students often need to make formatting revisions after initial submission of their final thesis or dissertation to the Graduate School. If you have met the Thesis/Dissertation Submission deadline for your intended term of graduation, but need to make additional formatting revisions, you can still graduate in that term provided you submit the required revisions by the individualized deadline provided by the Graduate School during your format review. All theses and dissertations are submitted electronically to the Graduate School. For electronic thesis and dissertation (ETD) submissions, PSU uses the ProQuest ETD Administrator (https://www.etdadmin.com/main/home?siteId=207) . Students will need to create an account through this system to submit their ETDs. We have created submission instructions (/gradschool/etd-submission-instructions) for using the ProQuest ETD Administrator that guide you through the steps of creating an account and submitting your ETD. ETD submission deadlines for the current academic year are available here (/gradschool/graduate-candidate-deadlines) . A submission after these deadlines will result in graduation in a subsequent term. There are two paper forms that students are required to submit to accompany their ETDs. Neither of these forms have specific due dates, but you should aim to submit them to the Graduate School at approximately the same time you submit your ETD through the ProQuest ETD Administrator. You cannot be certified for graduation without submitting these completed forms to the Graduate School: The Thesis Signature Page (gradschool/forms) (for master's students) and Dissertation Signature Page (gradschool/forms) (for doctoral students) are used for your committee to formally approve the final, post-defense copy of your ETD. The ETD Access Form (gradschool/forms) is used to grant the PSU Library the non-exclusive right to make your ETD available through the Digital Repository. PhD students must also complete the online Survey of Earned Doctorates (SED). (EdD students do not complete the Survey.) Please register and complete the survey via the survey page on the SED website (https://sed-ncses.org) . The registration process will ensure that you fill out the correct survey based on the graduation month and year you provide during the registration process. When you register for the survey, an email will be sent to you that will allow you to access the survey. Once you have completed the survey, a confirmation email will be sent to the Graduate School. View the student brochure (https://sedsurvey.org/Content/pdf/Student_Brochure.pdf) , or explore the SED website (https://sedsurvey.org/) for more detailed information. The Graduate School will contact you after we have performed the initial format review of your ETD. Any required formatting revisions must be completed (and resubmitted through the ProQuest ETD Administrator) before you can be certified for graduation. Once you have graduated, no further changes can be made to your ETD. You were graduated in part because this document was approved by your committee and the Graduate School. Your ETD therefore becomes part of your academic record and cannot be changed after graduation, even to correct typos. Doctoral students only : Please note that you cannot participate in the Spring PSU Commencement ceremony unless you have been certified for graduation by the Graduate School. Again, we will be in touch.", "metadata": {"source": "https://www.pdx.edu/gradschool/thesis-and-dissertation-information"}, "type": "Document"}, {"page_content": "", "metadata": {"source": "https://pdx.smartcatalogiq.com/2020-2021/bulletin/graduate-school/degree-requirements/master-s-degree/"}, "type": "Document"}, {"page_content": "Graduate Preparation Apply to PSU (https://apply.pdx.edu/apply/) Apply to CS (https://portlandstate.qualtrics.com/jfe/form/SV_0Txx6SextQbdCwl) Postbac Info (https://docs.google.com/a/pdx.edu/forms/d/e/1FAIpQLSd8RrjXlK3t5IyOT3iIJGjec5WfvPmadMzlARcfR5ydH62wpw/viewform) Many graduates with degrees in fields other than Computer Science are interested in pursuing a M.S. in Computer Science. The Graduate Preparation (or \"Grad Prep\") Track can assist a high performing, motivated student in mastering the essential computer science core necessary to be successful in the Master's program. The Grad Prep Track consists of a Programming & Languages Core and a Theory Core, comprised of many of the same classes taken by undergraduate Computer Science majors. Some of these courses have the option to test out of by demonstrating mastery based on either prior academic preparation or professional/personal programming experience through a credit by exam process. We encourage all prospective students to attend one of our monthly CS Postbac Info sessions (https://docs.google.com/a/pdx.edu/forms/d/e/1FAIpQLSd8RrjXlK3t5IyOT3iIJGjec5WfvPmadMzlARcfR5ydH62wpw/viewform) first to learn more about our postbaccalaureate options (https://www.pdx.edu/computer-science/postbaccalaureate) . Contact the CS Graduate Advisor ( gccs@pdx.edu (mailto:gccs@pdx.edu) ) for any questions. Grad Prep Requirements To be eligible for admission to the CS Master's program, Grad Prep students must complete the following courses with a B or better. For Grad Prep students, the GRE is waived for the M.S. application (/../computer-science/node/151) . CS 199 Prog & Problem-solving: First Exploration (https://docs.google.com/document/d/e/2PACX-1vTC6H4vehqQECxEVHFM24_5AKj5ni-X-vmX01jOz8_GS-Sh-IuQH5yADlvDPuCfolLazJTzLFbq__rJ/pub) (4 credits)* CS 161 Intro to Programming & Problem-solving (https://docs.google.com/document/d/e/2PACX-1vT6wUfKY4wJd24wV8742HCWoS5vOqNk3E7oFjSS-OmQvWEfZLVOm6iGa4AGgZ2CdseYeUO6dhinFs1_/pub) (4 credits)* CS 162 Intro to Computer Science (https://docs.google.com/document/d/e/2PACX-1vSUgFVtj4EE4jCKjg9m6fKcfg_eHxHwSBYkcXmYXOrCWq8FTQWKL4U_zZP4SksTdp4N9g5MjTD0hLHS/pub) (4 credits)* CS 163 Data Structures (https://docs.google.com/document/d/e/2PACX-1vQ5wSMsXqss1t0Q7PZd3YhDQE0GFqPY78wnVq7riAEqy20PxN1aGAr-1nGpcj_bmlaKj8lJvvM11Hoz/pub) (4 credits) CS 205 System Programming & Architecture (https://docs.google.com/document/d/e/2PACX-1vTlRuiBW96eUzHuvLH2F7C2nQikt3ARDDCPLg52aUheq0ra83IjE2WlsKERgaeeeYX5a7qI6CeppnJD/pub) (4 credits) CS 250 Discrete Structures I (https://docs.google.com/document/d/e/2PACX-1vTu696PrTMbunuwni0V7whXtju6mbBAgvcygwV4huoEjmKV6EXLvnoVvG0Pzzdsie6Ids5P7b5TkkVb/pub) (4 credits) CS 251 Discrete Structures II (https://docs.google.com/document/d/e/2PACX-1vSufoea5_NlpebR3m8qyNAYbPFEfp_I0bz1S14b6ILSWZunqf0GfN0mPNi6jqk0AfWmCb59h9shnvN-/pub) (4 credits) CS 302 Programming Methodologies and Software Implementation (https://docs.google.com/document/d/e/2PACX-1vTKMw8UYNbf9zyOyb2fK83w-AbbZbauOezinAmzNPLMDkpJoNg2oWzajYEJzCs3pVTdNbtu-oQR4_Vk/pub) (4 credits) CS 333 Intro to Operating Systems (https://docs.google.com/document/d/e/2PACX-1vTY7JTkDIaEX48udgWQh3CPN3SJOEaIZp2br3mde3_t5qpFCLdlawDLi3GbCl5mHcxPgH9G-6aA5hTg/pub) (4 credits) OR CS 532 Operating Systems Foundations (https://docs.google.com/document/d/e/2PACX-1vTZb8iVKL_lssBoKnKXlRfv4IDQsNM2MkwmVWRb8r00AXqK8ZXWgugN4sjHVbEIcOBs0P6xfPl7MjzR/pub) (3 credits) CS 350 Algorithms and Complexity (https://docs.google.com/document/d/e/2PACX-1vRDyj919A9JDvEJ-pEyJVFLC2YyT247G5PKUdbQqAlXkdrcIGDPTvY5SVIV2pVJOHCP-2r9Nb4MLWBh/pub) (4 credits) *Based on prior experience, a student may begin with any of these courses. See Introductory Course Guide (https://www.pdx.edu/computer-science/sites/computerscience.web.wdt.pdx.edu/files/2023-10/CS-Introductory-Courses_0.pdf) for details. Admission to PSU To begin Grad Prep at PSU, prospective students must first apply for postbaccalaureate admission (/../admissions/postbaccalaureate) . Postbaccalaureate applications are processed as they are received, generally within 4-6 weeks. Sample Schedules Students who did not take math beyond pre-calculus in their prior coursework are strongly advised to take at least one such course (e.g. calculus, linear algebra, discrete math, etc.) prior to taking CS 250. This sample program (https://www.pdx.edu/computer-science/sites/g/files/znldhr1671/files/2023-07/Grad-Prep-Modest-Schedule.pdf) assumes the student has modest programming experience and an adequate mathematical background. This sample program (https://www.pdx.edu/computer-science/sites/g/files/znldhr1671/files/2023-07/Grad-Prep-NoExp-Schedule.pdf) assumes the student has no prior programming experience and a limited mathematical background. Frequently Asked Questions Is the admission process to the CS program selective? No. At this time, all students that meet the admission requirements are admitted to the CS program. Can I have courses in progress while I submit my application? Yes, courses required for admission may be in progress at the time of application. If the in-progress coursework is not completed with the appropriate grade by the end of the term, CS admission may be revoked and the student may be dropped from all upper division CS courses (see number 4 below). What if I am in my last course at a community college and the course is not on my PSU DARS? Submit a current unofficial transcript from the college that shows the course in progress and your name and attach it to your application. Once your grade is recorded for this class, send an official transcript to PSU Admissions. What does conditional admittance mean? Students that apply to the program with courses in progress and have met all the other requirements will be admitted to the CS program on the condition that they receive a passing grade for the required classes in progress. Students will be allowed to register for upper division CS courses. At the end of the admission term, grades for classes which were in progress will be checked and students that have not passed will have their admission revoked and administratively dropped from their upper division CS courses. Once I'm admitted to the CS program, will my tuition increase? Yes, the Maseeh College of Engineering and Computer Science charges a differential tuition for admitted students to pay for use of College resources. Details of tuition and fees are located on Student Finance page (/../student-finance/tuition) . What if I am denied admission? Consult the CS Graduate Advisor ( gccs@pdx.edu (mailto:gccs@pdx.edu) ). Depending on the reason for the denial, you may request a review by the CS Appeals Committee.", "metadata": {"source": "https://www.pdx.edu/computer-science/grad-prep"}, "type": "Document"}, {"page_content": "Cybersecurity Graduate Certificate The Cybersecurity Graduate Certificate program requires admission (/../computer-science/node/151) as a graduate student. The program requires 21 hours total of graduate classes. There are two core classes for a total of 6 hours. In addition, five elective classes must be taken for the needed additional 15 credit hours. Certificate Requirements Gain Admission to our Graduate CS Program as either an M.S. or Ph.D. candidate. Note that an M.S. candidate may choose to either get both an M.S. and the Cybersecurity Graduate Certificate, or just complete the Cybersecurity Graduate Certificate. Fill out the GO-19 form (/../gradschool/forms) needed for admission to the certificate program. Make sure you ADD a certificate to your program. You also need your advisor's signature on the form. Your advisor must approve your plan to get the Security Certificate. Please return the completed form to the Graduate Advisor. Once you have submitted your GO-19 form, the Security Admission Committee will meet and approve or deny your application. Applicants will be notified of the committee's decision via email. Course Requirements Required Core Courses (6) CS 591 Introduction to Computer Security (3) CS 595 Web and Cloud Security (3) Five of the following courses or approved substitute courses (15) CS 554 Principles of Software Engineering (3) CS 555 Software Specification and Verification (3) CS 556 Software Implementation and Testing (3) CS 576 Computer Security Seminar (3) CS 585 Cryptography (3) CS 592 Malware Reverse Engineering (3) CS 593 Digital Forensics (3) CS 594 Internetworking Protocols (3) CS 596 Network Security (3) Any CS 510 course in Security (3) (https://docs.google.com/spreadsheets/d/1Zzyb9E1zLwQ0TYErZfoW9i2BM83b_PFba6zWmzMELQs/edit#gid=0)", "metadata": {"source": "https://www.pdx.edu/computer-science/cybersecurity"}, "type": "Document"}, {"page_content": "Doctor of Philosophy (Ph.D.) The Doctor of Philosophy (Ph.D.) is the highest degree offered in any discipline. It is intended for those who will pursue research in the field. The degree is usually required to teach computer science at the university level, and for employment in prestigious industrial research laboratories. Students may enter the doctoral program with a bachelor's degree or with a master's degree, and must have adequate background in computer science. Since completion of the degree requires presentation of a dissertation comprising of original research, the time required is pre-determined. Four to six years of full-time work are typical, less if the student enters with a Master's degree in computer science. Advising Upon admission to the doctoral program, a faculty adviser will be designated by the CS Director of graduate studies to advise and meet the student in regular consultation concerning the program of study and research. Your CS faculty adviser approves the courses in your program, including non-CS courses and courses taken outside of PSU. Students and their advisers will fill out a Ph.D. Plan of Study form (/../computer-science/sites/g/files/znldhr1671/files/2020-07/PhD-Plan-of-Study.pdf) after the student successfully completes 9 graduate level credits, no later than 6 months before their Research Proficiency Exam (RPE) (/../computer-science/node/176) . Doctoral students are also assigned to additional faculty members that make up an advisory committee during their first term. The role of the committee is to monitor the student\u2019s progress, to offer academic guidance, and to provide a resource in resolving academic or advising issues. The advisory committee consists of three faculty members, but they may come from different research areas of the faculty adviser. The committee will meet with the student in the Fall and Spring terms to generate a written assessment of progress and to set goals in writing for the next term. The committee, in consultation with the CS director of graduate studies, has the authority to delay a student\u2019s RPE date. The committee's opinion shall have strong weight in determining whether the student should continue to receive departmental support in the form of a teaching assistantship. The advisory committee's role is taken over by the dissertation committee when the student advances to candidacy. When a doctoral student begins research work on a PhD dissertation, the faculty adviser should be the person that will supervise the dissertation. If a new faculty adviser has been identified, submit a \u2018 Change of Advisor form (/../computer-science/sites/g/files/znldhr1671/files/2020-07/Adviser-Change-Form.pdf) \u2019 to the CS Graduate Advisor ( gccs@pdx.edu (mailto:gccs@pdx.edu) ). The faculty adviser must be a full-time faculty member and must agree to the change. Any changes should be properly recorded and processed by the CS department. Graduate Assistantships First-year Ph.D. students who are admitted with financial support are typically supported as a Teaching Assistant for up to three quarters, which typically pays a monthly stipend and a tuition remission. The student might teach a course under the supervision of a faculty member or grade papers for approximately 15-20 hours per week. Ph.D. students may apply to serve as a TA for an additional three quarters, but are highly encouraged to connect with a potential faculty adviser for a research assistantship. Apply for TA-ship Curriculum Core Courses (18 credits) - Generally expected to be completed by the end of the second year. CS 581 Theory of Computation (3) CS 684 Algorithm Design & Analysis (3) CS 558 Programming Languages (3) CS 533 Concepts of Operating Systems (3) CS 538 Computer Architecture or ECE 585 & ECE 586 (3) CS 669 Scholarship Skills for Computer Science & Engineering (3) Other Elective Courses (27 credits) Any graduate level courses in Computer Science, subject to guidance listed under Departmental Requirements CS 601 Research or Other Elective Credits (18 credits) CS 603 Dissertation Research Credits (27 credits) Departmental Requirements In addition to the departmental requirements, students should review the university's doctoral degree requirements (https://pdx.smartcatalogiq.com/2020-2021/Bulletin/Graduate-School/Degree-requirements/Doctoral-Degree) . Maintain good academic standing (https://pdx.smartcatalogiq.com/2020-2021/Bulletin/Graduate-School/Enrollment/Academic-Standing) with a cumulative graduate GPA of 3.00 or higher in all graduate credits earned at PSU. All regular courses must be graded (not P/NP) and passed with a grade of B or better. Maintain a 3.5 GPA in core course work, with a minimum grade of B. Research, projects, internships, independent study and reading & conference credits may be graded P/NP or with a letter grade. These credits are set up independently by the student and a faculty member. These credits must be passed with a P or a grade of B or better. Students must be registered for a minimum of 1 graduate credit during the term the comprehensive exam is taken. For elective courses: These courses should be used to strengthen the program in the student's research area. CS 501/601 (Research) and CS 509/609 (Graduate Assistant Practicum) may not be counted. A maximum of 6 credits of CS 502/602 (Independent Study), CS 505/605 (Reading and Conference), and CS 506/606 (Special Projects) may be counted. Advancement to Candidacy A student is advanced to candidacy after passing the comprehensive exam and successful defense of the dissertation proposal. Comprehensive Examination The comprehensive exam is a university requirement for the doctoral degree. In the CS Department, it takes the form of the Research Proficiency Examination (RPE), covering original research performed by the student. The exam consists of a written paper, public oral presentation, and a public question and answer session. Passing the exam is required before a PhD student can prepare and defend a dissertation. Review more about the comprehensive exam on our Research Proficiency Exam (/../computer-science/node/176/) page. Dissertation Proposal After passing the comprehensive exam and identifying a dissertation research topic, a dissertation committee will be appointed to the student and will take over the role of the advisory committee (see Advising section above). If the research topic has changed since admission, students should change their faculty adviser to the person that will supervise the dissertation. If a new faculty adviser has been identified, submit a \u2018change of advisor form\u2019 to the Graduate Advisor ( gccs@pdx.edu (mailto:gccs@pdx.edu) ). Any changes should be properly recorded and processed by the Computer Science office. The proposal: Identifies the general research field (e.g. networks) and presents an annotated bibliography of literature relevant to the particular dissertation topic (e.g. verification of network routing protocols). Describes the research problem. Describes the proposed approach to solving the problem, including specific methods to be tried. Gives a timeline for completing the work. The written proposal will be circulated among the dissertation committee, and upon satisfactory agreement, the student will publicly present the proposal. The presentation begins with an oral talk, then the dissertation committee will question the student privately. Students satisfactorily progressing are expected to have a dissertation proposal approved by the end of the third year. The abstract and date for the defense must be submitted to the CS Graduate Advisor at least two weeks in advance of the date of the defense. Dissertation Defense Under the direction and consultation of the dissertation committee, Ph.D. candidates must complete a dissertation consisting of original research. The student will prepare, revise, and correct a draft of the dissertation as directed by the dissertation committee until it meets the approval. The work is expected to be a quality of merit publication in refereed journals or conferences. After preparation of the written dissertation, a candidate\u2019s dissertation committee will conduct a dissertation defense. The candidate is expected to prepare an oral presentation on the research methodology and results. The abstract and date for the defense must be submitted to the CS Graduate Advisor at least two weeks in advance of the date of the defense. The final, approved dissertation should be submitted to csoffice@pdx.edu (mailto:csoffice@pdx.edu) for posting. PSU has a set of Dissertation Guidelines (/../gradschool/thesis-and-dissertation-information) that describe the format and content requirements for the dissertation. Graduation Procedures Follow the university's outline for Doctoral degrees (/../gradschool/summary-of-procedures-doctoral-degrees) . Apply for graduation (/../gradschool/applying-for-graduation) by the first Friday of the first week of the anticipated term of graduation. Submit a revised Plan of Study (/../computer-science/sites/g/files/znldhr1671/files/2020-07/PhD-Plan-of-Study.pdf) to the CS Graduate Advisor ( gccs@pdx.edu (mailto:gccs@pdx.edu) ). Submit the GO-17D (/../gradschool/forms) form to the CS Graduate Advisor. (/computer-science/../gradschool/graduate-candidate-deadlines) Graduate Candidate Deadlines (/computer-science/../gradschool/graduate-candidate-deadlines)", "metadata": {"source": "https://www.pdx.edu/computer-science/doctor-philosophy-phd"}, "type": "Document"}, {"page_content": "Research Proficiency Examination Every Ph.D. student is required to take the Research Proficiency Exam (RPE) by the end of their second year at PSU. This will satisfy the comprehensive exam requirement, which measures a Ph.D. student's knowledge within their domain of research. Years are counted from the term in which the student enters the Ph.D. program. Extensions to the two-year period may be granted by a Ph.D. student's advisory committee in consultation with the CS director of graduate studies. Part-time students may routinely obtain an extension to three years. Note, the university limit is 5 years if entering with a MS degree and 7 years otherwise. Students must be registered for a minimum of 1 graduate credit in each term they are taking or working on the RPE. The RPE exam consists of a written research paper and an oral presentation: With the approval of the CS director of graduate studies, a Ph.D. student is assigned to a 3-person committee created by the student\u2019s faculty advisor. The committee members must be knowledgeable in the research area. If appropriate, one member of the committee may be a faculty member from a different department or institution. The Ph.D. student conducts research on a problem and writes a paper that is in a form appropriate for publication at a conference or workshop in that research area. Standard formatting can be used as appropriate for that area. The student schedules the RPE presentation with the RPE committee. Presentations can take place at any time during the academic year, and do not need to be coordinated with each other. The presentation is open to all and the paper must be circulated to the faculty a week before the presentation. The presentation is 45 minutes for the talk followed by 15 minutes for questions. The format is that of a typical technical talk that first motivates the problem, then describes related work, followed by the research contributions. The RPE committee decides on a Pass/Fail/Retake: A pass needs to be agreed upon unanimously by the RPE committee. In case of a retake, the student needs to address the committee's feedback and retake the exam within six months. The exam can only be taken twice. Relevant Documents RPE Checklist (/../computer-science/sites/g/files/znldhr1671/files/2020-07/RPE-Check-List.pdf) - To be filled out at the time of applying to take the RPE. RPE Result Report (/../computer-science/sites/g/files/znldhr1671/files/2020-07/RPE-Result-Report.pdf) - Used by an RPE committee to report the result of the exam.", "metadata": {"source": "https://www.pdx.edu/computer-science/research-proficiency-examination"}, "type": "Document"}]